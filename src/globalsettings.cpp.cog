/****************************************************************************
** 
[[[cog
import datetime
cog.outl("** Copyright (C) {0}  DH Electroncis GmbH".format(datetime.datetime.now().year))
]]]
[[[end]]]
** Contact: https://www.dh-electronics.com/
**
****************************************************************************/

/*
-------------------------------------------------------------------------------

  WARNING

  This is a generated file. DO NOT EDIT THIS FILE! Your changes will
  be lost the next time this file is regenerated.
   
  This file was generated using cog
  https://github.com/ktonon/cog

  The globalsettings.cpp can be generated with following python command:
  python3 -m cogapp -d -o globalsettings.cpp  globalsettings.cpp.cog

-------------------------------------------------------------------------------
 */ 
#include "globalsettings.h"

/*[[[cog
import cog
import helper
nodes = helper.getSettingsDef()
]]]*/
//[[[end]]]

GlobalSettings::GlobalSettings(QObject *parent) : QObject(parent), m_settings(qApp->applicationDirPath()+"/config.ini")
  /*[[[cog
  initializationlist = ""
  for element in nodes:
  	initializationlist = initializationlist + ",m_{0}({1})".format(helper.first_lower(element["name"]),element["default"])
  cog.outl(initializationlist)
  ]]]*/
  //[[[end]]]
{
    load();

    QObject::connect(&m_settings, SIGNAL(fileChanged()), this, SLOT(settingsFileChanged()));
}

void GlobalSettings::settingsFileChanged()
{
    load();
}

/*[[[cog
for element in nodes:
	cog.outl("""void GlobalSettings::set{1}({2} value)
{{
    if(m_{0}!=value)
    {{
        m_{0} = value;
        emit {0}Changed(m_{0});
    }}
}}""".format(helper.first_lower(element["name"]),element["name"], element["type"], element["name"]))
]]]*/
//[[[end]]]

void GlobalSettings::load()
{
    m_settings.loadSettings();

    /*[[[cog
    for element in nodes:
    	if element["file"] == True:
    		conversion = ""
    		if element["type"] == "int": 
    			conversion = "QString::number(m_{0})).toInt());".format(helper.first_lower(element["name"]))
    		elif element["type"] == "bool": 
    			conversion = "m_{0}?\"true\":\"false\") == \"true\");".format(helper.first_lower(element["name"]))
    		elif element["type"] == "QString": 
    			conversion = "m_{0}));".format(helper.first_lower(element["name"]))
    		else:
    			cog.error("Unsupported type")

    		cog.outl("set{0}(m_settings.getValue(\"{1}\",{2}".format(element["name"],element["group"]+"."+element["name"], conversion))
    ]]]*/
    //[[[end]]]
}


void GlobalSettings::save()
{
    /*[[[cog
    for element in nodes:
    	if element["file"] == True:
    		cog.outl("m_settings.setValue(\"{0}\",m_{1});".format( element["group"]+"."+element["name"],helper.first_lower(element["name"])))
    ]]]*/
    //[[[end]]]

    m_settings.saveSettings();

}
