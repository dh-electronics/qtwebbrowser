/****************************************************************************
** 
** Copyright (C) 2024  DH Electroncis GmbH
** Contact: https://www.dh-electronics.com/
**
****************************************************************************/

/*
-------------------------------------------------------------------------------

  WARNING

  This is a generated file. DO NOT EDIT THIS FILE! Your changes will
  be lost the next time this file is regenerated.
   
  This file was generated using cog
  https://github.com/ktonon/cog

  The globalsettings.cpp can be generated with following python command:
  python3 -m cogapp -d -o globalsettings.cpp  globalsettings.cpp.cog

-------------------------------------------------------------------------------
 */ 
#include "globalsettings.h"


GlobalSettings::GlobalSettings(QObject *parent) : QObject(parent), m_settings(qApp->applicationDirPath()+"/config.ini")
  ,m_httpUserAgent("dhmi"),m_httpDiskCacheEnabled(false),m_autoLoadImages(true),m_certCheckEnabled(true),m_trustedDomains(),m_kioskmodeEnabled(true),m_debugEnabled(false),m_remoteDebuggingPort("0.0.0.0:40004"),m_javaScriptDisabled(false),m_touchtrackingEnabled(false),m_viewRotation(0),m_screensaverActivationTime(0),m_maxTabCount(10),m_contextMenuEnabled(false),m_defaultUrl("http://dhmi"),m_uiColor("#46a2da"),m_uiSeparatorColor("#7ebee5"),m_toolBarSeparatorColor("#a3d1ed"),m_toolBarFillColor("#7ebee5"),m_buttonPressedColor("#3f91c4"),m_emptyBackgroundColor("#e4e4e4"),m_uiHighlightColor("#fddd5c"),m_inactivePagerColor("#bcbdbe"),m_textFieldStrokeColor("#3882ae"),m_placeholderColor("#a0a1a2"),m_iconOverlayColor("#0e202c"),m_iconStrokeColor("#d6d6d6"),m_progressBarColor("#E0006A"),m_defaultFontFamily("Open Sans"),m_proxyHostName(),m_proxyUser(),m_proxyPassword(),m_proxyPort(),m_proxyType(2)
{
    load();

    QObject::connect(&m_settings, SIGNAL(fileChanged()), this, SLOT(settingsFileChanged()));
}

void GlobalSettings::settingsFileChanged()
{
    load();
}

void GlobalSettings::setHttpUserAgent(QString value)
{
    if(m_httpUserAgent!=value)
    {
        m_httpUserAgent = value;
        emit httpUserAgentChanged(m_httpUserAgent);
    }
}
void GlobalSettings::setHttpDiskCacheEnabled(bool value)
{
    if(m_httpDiskCacheEnabled!=value)
    {
        m_httpDiskCacheEnabled = value;
        emit httpDiskCacheEnabledChanged(m_httpDiskCacheEnabled);
    }
}
void GlobalSettings::setAutoLoadImages(bool value)
{
    if(m_autoLoadImages!=value)
    {
        m_autoLoadImages = value;
        emit autoLoadImagesChanged(m_autoLoadImages);
    }
}
void GlobalSettings::setCertCheckEnabled(bool value)
{
    if(m_certCheckEnabled!=value)
    {
        m_certCheckEnabled = value;
        emit certCheckEnabledChanged(m_certCheckEnabled);
    }
}
void GlobalSettings::setTrustedDomains(QString value)
{
    if(m_trustedDomains!=value)
    {
        m_trustedDomains = value;
        emit trustedDomainsChanged(m_trustedDomains);
    }
}
void GlobalSettings::setKioskmodeEnabled(bool value)
{
    if(m_kioskmodeEnabled!=value)
    {
        m_kioskmodeEnabled = value;
        emit kioskmodeEnabledChanged(m_kioskmodeEnabled);
    }
}
void GlobalSettings::setDebugEnabled(bool value)
{
    if(m_debugEnabled!=value)
    {
        m_debugEnabled = value;
        emit debugEnabledChanged(m_debugEnabled);
    }
}
void GlobalSettings::setRemoteDebuggingPort(QString value)
{
    if(m_remoteDebuggingPort!=value)
    {
        m_remoteDebuggingPort = value;
        emit remoteDebuggingPortChanged(m_remoteDebuggingPort);
    }
}
void GlobalSettings::setJavaScriptDisabled(bool value)
{
    if(m_javaScriptDisabled!=value)
    {
        m_javaScriptDisabled = value;
        emit javaScriptDisabledChanged(m_javaScriptDisabled);
    }
}
void GlobalSettings::setTouchtrackingEnabled(bool value)
{
    if(m_touchtrackingEnabled!=value)
    {
        m_touchtrackingEnabled = value;
        emit touchtrackingEnabledChanged(m_touchtrackingEnabled);
    }
}
void GlobalSettings::setViewRotation(int value)
{
    if(m_viewRotation!=value)
    {
        m_viewRotation = value;
        emit viewRotationChanged(m_viewRotation);
    }
}
void GlobalSettings::setScreensaverActivationTime(int value)
{
    if(m_screensaverActivationTime!=value)
    {
        m_screensaverActivationTime = value;
        emit screensaverActivationTimeChanged(m_screensaverActivationTime);
    }
}
void GlobalSettings::setMaxTabCount(int value)
{
    if(m_maxTabCount!=value)
    {
        m_maxTabCount = value;
        emit maxTabCountChanged(m_maxTabCount);
    }
}
void GlobalSettings::setContextMenuEnabled(bool value)
{
    if(m_contextMenuEnabled!=value)
    {
        m_contextMenuEnabled = value;
        emit contextMenuEnabledChanged(m_contextMenuEnabled);
    }
}
void GlobalSettings::setDefaultUrl(QString value)
{
    if(m_defaultUrl!=value)
    {
        m_defaultUrl = value;
        emit defaultUrlChanged(m_defaultUrl);
    }
}
void GlobalSettings::setUiColor(QString value)
{
    if(m_uiColor!=value)
    {
        m_uiColor = value;
        emit uiColorChanged(m_uiColor);
    }
}
void GlobalSettings::setuiSeparatorColor(QString value)
{
    if(m_uiSeparatorColor!=value)
    {
        m_uiSeparatorColor = value;
        emit uiSeparatorColorChanged(m_uiSeparatorColor);
    }
}
void GlobalSettings::settoolBarSeparatorColor(QString value)
{
    if(m_toolBarSeparatorColor!=value)
    {
        m_toolBarSeparatorColor = value;
        emit toolBarSeparatorColorChanged(m_toolBarSeparatorColor);
    }
}
void GlobalSettings::settoolBarFillColor(QString value)
{
    if(m_toolBarFillColor!=value)
    {
        m_toolBarFillColor = value;
        emit toolBarFillColorChanged(m_toolBarFillColor);
    }
}
void GlobalSettings::setbuttonPressedColor(QString value)
{
    if(m_buttonPressedColor!=value)
    {
        m_buttonPressedColor = value;
        emit buttonPressedColorChanged(m_buttonPressedColor);
    }
}
void GlobalSettings::setemptyBackgroundColor(QString value)
{
    if(m_emptyBackgroundColor!=value)
    {
        m_emptyBackgroundColor = value;
        emit emptyBackgroundColorChanged(m_emptyBackgroundColor);
    }
}
void GlobalSettings::setuiHighlightColor(QString value)
{
    if(m_uiHighlightColor!=value)
    {
        m_uiHighlightColor = value;
        emit uiHighlightColorChanged(m_uiHighlightColor);
    }
}
void GlobalSettings::setinactivePagerColor(QString value)
{
    if(m_inactivePagerColor!=value)
    {
        m_inactivePagerColor = value;
        emit inactivePagerColorChanged(m_inactivePagerColor);
    }
}
void GlobalSettings::settextFieldStrokeColor(QString value)
{
    if(m_textFieldStrokeColor!=value)
    {
        m_textFieldStrokeColor = value;
        emit textFieldStrokeColorChanged(m_textFieldStrokeColor);
    }
}
void GlobalSettings::setplaceholderColor(QString value)
{
    if(m_placeholderColor!=value)
    {
        m_placeholderColor = value;
        emit placeholderColorChanged(m_placeholderColor);
    }
}
void GlobalSettings::seticonOverlayColor(QString value)
{
    if(m_iconOverlayColor!=value)
    {
        m_iconOverlayColor = value;
        emit iconOverlayColorChanged(m_iconOverlayColor);
    }
}
void GlobalSettings::seticonStrokeColor(QString value)
{
    if(m_iconStrokeColor!=value)
    {
        m_iconStrokeColor = value;
        emit iconStrokeColorChanged(m_iconStrokeColor);
    }
}
void GlobalSettings::setprogressBarColor(QString value)
{
    if(m_progressBarColor!=value)
    {
        m_progressBarColor = value;
        emit progressBarColorChanged(m_progressBarColor);
    }
}
void GlobalSettings::setdefaultFontFamily(QString value)
{
    if(m_defaultFontFamily!=value)
    {
        m_defaultFontFamily = value;
        emit defaultFontFamilyChanged(m_defaultFontFamily);
    }
}
void GlobalSettings::setProxyHostName(QString value)
{
    if(m_proxyHostName!=value)
    {
        m_proxyHostName = value;
        emit proxyHostNameChanged(m_proxyHostName);
    }
}
void GlobalSettings::setProxyUser(QString value)
{
    if(m_proxyUser!=value)
    {
        m_proxyUser = value;
        emit proxyUserChanged(m_proxyUser);
    }
}
void GlobalSettings::setProxyPassword(QString value)
{
    if(m_proxyPassword!=value)
    {
        m_proxyPassword = value;
        emit proxyPasswordChanged(m_proxyPassword);
    }
}
void GlobalSettings::setProxyPort(int value)
{
    if(m_proxyPort!=value)
    {
        m_proxyPort = value;
        emit proxyPortChanged(m_proxyPort);
    }
}
void GlobalSettings::setProxyType(int value)
{
    if(m_proxyType!=value)
    {
        m_proxyType = value;
        emit proxyTypeChanged(m_proxyType);
    }
}

void GlobalSettings::load()
{
    m_settings.loadSettings();

    setHttpUserAgent(m_settings.getValue("General.HttpUserAgent",m_httpUserAgent));
    setHttpDiskCacheEnabled(m_settings.getValue("General.HttpDiskCacheEnabled",m_httpDiskCacheEnabled?"true":"false") == "true");
    setAutoLoadImages(m_settings.getValue("General.AutoLoadImages",m_autoLoadImages?"true":"false") == "true");
    setCertCheckEnabled(m_settings.getValue("General.CertCheckEnabled",m_certCheckEnabled?"true":"false") == "true");
    setTrustedDomains(m_settings.getValue("General.TrustedDomains",m_trustedDomains));
    setKioskmodeEnabled(m_settings.getValue("UI.KioskmodeEnabled",m_kioskmodeEnabled?"true":"false") == "true");
    setDebugEnabled(m_settings.getValue("Debug.DebugEnabled",m_debugEnabled?"true":"false") == "true");
    setRemoteDebuggingPort(m_settings.getValue("Debug.RemoteDebuggingPort",m_remoteDebuggingPort));
    setJavaScriptDisabled(m_settings.getValue("UI.JavaScriptDisabled",m_javaScriptDisabled?"true":"false") == "true");
    setTouchtrackingEnabled(m_settings.getValue("UI.TouchtrackingEnabled",m_touchtrackingEnabled?"true":"false") == "true");
    setViewRotation(m_settings.getValue("UI.ViewRotation",QString::number(m_viewRotation)).toInt());
    setScreensaverActivationTime(m_settings.getValue("UI.ScreensaverActivationTime",QString::number(m_screensaverActivationTime)).toInt());
    setMaxTabCount(m_settings.getValue("UI.MaxTabCount",QString::number(m_maxTabCount)).toInt());
    setContextMenuEnabled(m_settings.getValue("UI.ContextMenuEnabled",m_contextMenuEnabled?"true":"false") == "true");
    setDefaultUrl(m_settings.getValue("General.DefaultUrl",m_defaultUrl));
    setUiColor(m_settings.getValue("Color.UiColor",m_uiColor));
    setuiSeparatorColor(m_settings.getValue("Color.uiSeparatorColor",m_uiSeparatorColor));
    settoolBarSeparatorColor(m_settings.getValue("Color.toolBarSeparatorColor",m_toolBarSeparatorColor));
    settoolBarFillColor(m_settings.getValue("Color.toolBarFillColor",m_toolBarFillColor));
    setbuttonPressedColor(m_settings.getValue("Color.buttonPressedColor",m_buttonPressedColor));
    setemptyBackgroundColor(m_settings.getValue("Color.emptyBackgroundColor",m_emptyBackgroundColor));
    setuiHighlightColor(m_settings.getValue("Color.uiHighlightColor",m_uiHighlightColor));
    setinactivePagerColor(m_settings.getValue("Color.inactivePagerColor",m_inactivePagerColor));
    settextFieldStrokeColor(m_settings.getValue("Color.textFieldStrokeColor",m_textFieldStrokeColor));
    setplaceholderColor(m_settings.getValue("Color.placeholderColor",m_placeholderColor));
    seticonOverlayColor(m_settings.getValue("Color.iconOverlayColor",m_iconOverlayColor));
    seticonStrokeColor(m_settings.getValue("Color.iconStrokeColor",m_iconStrokeColor));
    setprogressBarColor(m_settings.getValue("Color.progressBarColor",m_progressBarColor));
    setdefaultFontFamily(m_settings.getValue("Color.defaultFontFamily",m_defaultFontFamily));
    setProxyHostName(m_settings.getValue("Proxy.ProxyHostName",m_proxyHostName));
    setProxyUser(m_settings.getValue("Proxy.ProxyUser",m_proxyUser));
    setProxyPassword(m_settings.getValue("Proxy.ProxyPassword",m_proxyPassword));
    setProxyPort(m_settings.getValue("Proxy.ProxyPort",QString::number(m_proxyPort)).toInt());
    setProxyType(m_settings.getValue("Proxy.ProxyType",QString::number(m_proxyType)).toInt());
}


void GlobalSettings::save()
{
    m_settings.setValue("General.HttpUserAgent",m_httpUserAgent);
    m_settings.setValue("General.HttpDiskCacheEnabled",m_httpDiskCacheEnabled);
    m_settings.setValue("General.AutoLoadImages",m_autoLoadImages);
    m_settings.setValue("General.CertCheckEnabled",m_certCheckEnabled);
    m_settings.setValue("General.TrustedDomains",m_trustedDomains);
    m_settings.setValue("UI.KioskmodeEnabled",m_kioskmodeEnabled);
    m_settings.setValue("Debug.DebugEnabled",m_debugEnabled);
    m_settings.setValue("Debug.RemoteDebuggingPort",m_remoteDebuggingPort);
    m_settings.setValue("UI.JavaScriptDisabled",m_javaScriptDisabled);
    m_settings.setValue("UI.TouchtrackingEnabled",m_touchtrackingEnabled);
    m_settings.setValue("UI.ViewRotation",m_viewRotation);
    m_settings.setValue("UI.ScreensaverActivationTime",m_screensaverActivationTime);
    m_settings.setValue("UI.MaxTabCount",m_maxTabCount);
    m_settings.setValue("UI.ContextMenuEnabled",m_contextMenuEnabled);
    m_settings.setValue("General.DefaultUrl",m_defaultUrl);
    m_settings.setValue("Color.UiColor",m_uiColor);
    m_settings.setValue("Color.uiSeparatorColor",m_uiSeparatorColor);
    m_settings.setValue("Color.toolBarSeparatorColor",m_toolBarSeparatorColor);
    m_settings.setValue("Color.toolBarFillColor",m_toolBarFillColor);
    m_settings.setValue("Color.buttonPressedColor",m_buttonPressedColor);
    m_settings.setValue("Color.emptyBackgroundColor",m_emptyBackgroundColor);
    m_settings.setValue("Color.uiHighlightColor",m_uiHighlightColor);
    m_settings.setValue("Color.inactivePagerColor",m_inactivePagerColor);
    m_settings.setValue("Color.textFieldStrokeColor",m_textFieldStrokeColor);
    m_settings.setValue("Color.placeholderColor",m_placeholderColor);
    m_settings.setValue("Color.iconOverlayColor",m_iconOverlayColor);
    m_settings.setValue("Color.iconStrokeColor",m_iconStrokeColor);
    m_settings.setValue("Color.progressBarColor",m_progressBarColor);
    m_settings.setValue("Color.defaultFontFamily",m_defaultFontFamily);
    m_settings.setValue("Proxy.ProxyHostName",m_proxyHostName);
    m_settings.setValue("Proxy.ProxyUser",m_proxyUser);
    m_settings.setValue("Proxy.ProxyPassword",m_proxyPassword);
    m_settings.setValue("Proxy.ProxyPort",m_proxyPort);
    m_settings.setValue("Proxy.ProxyType",m_proxyType);

    m_settings.saveSettings();

}
