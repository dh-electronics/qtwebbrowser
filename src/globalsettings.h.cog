/****************************************************************************
** 
[[[cog
import datetime
cog.outl("** Copyright (C) {0}  DH Electroncis GmbH".format(datetime.datetime.now().year))
]]]
[[[end]]]
** Contact: https://www.dh-electronics.com/
**
****************************************************************************/

/*
-------------------------------------------------------------------------------

  WARNING

  This is a generated file. DO NOT EDIT THIS FILE! Your changes will
  be lost the next time this file is regenerated.
   
  This file was generated using cog
  https://github.com/ktonon/cog

  The globalsettings.cpp can be generated with following python command:
  python3 -m cogapp -d -o globalsettings.h  globalsettings.h.cog

-------------------------------------------------------------------------------
 */ 
#ifndef GLOBALSETTINGS_H
#define GLOBALSETTINGS_H

#include <QObject>
#include "settings.h"
#include <QGuiApplication>

/*[[[cog
import cog
import helper
nodes = helper.getSettingsDef()
]]]*/
//[[[end]]]

/*!
    \class GlobalSettings
    \brief The GlobalSettings class provides the app settings

    GlobalSettings defines a settings object to which stores the
    Property objects into an ini file in the application folder.
    The settings object informs the GlobalSettings about changed
    settings file. The GlobalSettings class informs then about the
    changes with the NOTIFY's of the single Property objects.

*/
class GlobalSettings : public QObject
{
    Q_OBJECT
    /*[[[cog
    for element in nodes:
        cog.outl("Q_PROPERTY ({0} {1} READ {1} WRITE set{2} NOTIFY {1}Changed)".format(element["type"], helper.first_lower(element["name"]), element["name"]))
    ]]]*/
    //[[[end]]]

public:
    explicit GlobalSettings(QObject *parent = 0);

    Q_INVOKABLE void save();

    /*[[[cog
    for element in nodes:
        cog.outl("void set{0}({1});".format(element["name"], element["type"]))
       
    ]]]*/
    //[[[end]]]

    /*[[[cog
    for element in nodes:
        cog.outl("{0} {1}() const {{ return m_{1}; }}".format(element["type"], helper.first_lower(element["name"])))
       
    ]]]*/
    //[[[end]]]

signals:
    /*[[[cog
    for element in nodes:
        cog.outl("void {0}Changed({1});".format(helper.first_lower(element["name"]), element["type"]))
       
    ]]]*/
    //[[[end]]]

private slots:
    void settingsFileChanged();

private:
    void load();

    Settings* m_settings;

    /*[[[cog
    for element in nodes:
        cog.outl("{0} m_{1};".format(element["type"], helper.first_lower(element["name"])))
       
    ]]]*/
    //[[[end]]]

};

#endif // GLOBALSETTINGS_H

