/****************************************************************************
** 
** Copyright (C) 2024  DH Electroncis GmbH
** Contact: https://www.dh-electronics.com/
**
****************************************************************************/

/*
-------------------------------------------------------------------------------

  WARNING

  This is a generated file. DO NOT EDIT THIS FILE! Your changes will
  be lost the next time this file is regenerated.
   
  This file was generated using cog
  https://github.com/ktonon/cog

  The globalsettings.cpp can be generated with following python command:
  python3 -m cogapp -d -o globalsettings.h  globalsettings.h.cog

-------------------------------------------------------------------------------
 */ 
#ifndef GLOBALSETTINGS_H
#define GLOBALSETTINGS_H

#include <QObject>
#include "settings.h"
#include <QGuiApplication>


/*!
    \class GlobalSettings
    \brief The GlobalSettings class provides the app settings

    GlobalSettings defines a settings object to which stores the
    Property objects into an ini file in the application folder.
    The settings object informs the GlobalSettings about changed
    settings file. The GlobalSettings class informs then about the
    changes with the NOTIFY's of the single Property objects.

*/
class GlobalSettings : public QObject
{
    Q_OBJECT
    Q_PROPERTY (QString httpUserAgent READ httpUserAgent WRITE setHttpUserAgent NOTIFY httpUserAgentChanged)
    Q_PROPERTY (bool httpDiskCacheEnabled READ httpDiskCacheEnabled WRITE setHttpDiskCacheEnabled NOTIFY httpDiskCacheEnabledChanged)
    Q_PROPERTY (bool autoLoadImages READ autoLoadImages WRITE setAutoLoadImages NOTIFY autoLoadImagesChanged)
    Q_PROPERTY (bool certCheckEnabled READ certCheckEnabled WRITE setCertCheckEnabled NOTIFY certCheckEnabledChanged)
    Q_PROPERTY (QString trustedDomains READ trustedDomains WRITE setTrustedDomains NOTIFY trustedDomainsChanged)
    Q_PROPERTY (bool kioskmodeEnabled READ kioskmodeEnabled WRITE setKioskmodeEnabled NOTIFY kioskmodeEnabledChanged)
    Q_PROPERTY (bool debugEnabled READ debugEnabled WRITE setDebugEnabled NOTIFY debugEnabledChanged)
    Q_PROPERTY (QString remoteDebuggingPort READ remoteDebuggingPort WRITE setRemoteDebuggingPort NOTIFY remoteDebuggingPortChanged)
    Q_PROPERTY (bool javaScriptDisabled READ javaScriptDisabled WRITE setJavaScriptDisabled NOTIFY javaScriptDisabledChanged)
    Q_PROPERTY (bool touchtrackingEnabled READ touchtrackingEnabled WRITE setTouchtrackingEnabled NOTIFY touchtrackingEnabledChanged)
    Q_PROPERTY (int viewRotation READ viewRotation WRITE setViewRotation NOTIFY viewRotationChanged)
    Q_PROPERTY (int screensaverActivationTime READ screensaverActivationTime WRITE setScreensaverActivationTime NOTIFY screensaverActivationTimeChanged)
    Q_PROPERTY (int maxTabCount READ maxTabCount WRITE setMaxTabCount NOTIFY maxTabCountChanged)
    Q_PROPERTY (bool contextMenuEnabled READ contextMenuEnabled WRITE setContextMenuEnabled NOTIFY contextMenuEnabledChanged)
    Q_PROPERTY (QString defaultUrl READ defaultUrl WRITE setDefaultUrl NOTIFY defaultUrlChanged)
    Q_PROPERTY (QString uiColor READ uiColor WRITE setUiColor NOTIFY uiColorChanged)
    Q_PROPERTY (QString uiSeparatorColor READ uiSeparatorColor WRITE setuiSeparatorColor NOTIFY uiSeparatorColorChanged)
    Q_PROPERTY (QString toolBarSeparatorColor READ toolBarSeparatorColor WRITE settoolBarSeparatorColor NOTIFY toolBarSeparatorColorChanged)
    Q_PROPERTY (QString toolBarFillColor READ toolBarFillColor WRITE settoolBarFillColor NOTIFY toolBarFillColorChanged)
    Q_PROPERTY (QString buttonPressedColor READ buttonPressedColor WRITE setbuttonPressedColor NOTIFY buttonPressedColorChanged)
    Q_PROPERTY (QString emptyBackgroundColor READ emptyBackgroundColor WRITE setemptyBackgroundColor NOTIFY emptyBackgroundColorChanged)
    Q_PROPERTY (QString uiHighlightColor READ uiHighlightColor WRITE setuiHighlightColor NOTIFY uiHighlightColorChanged)
    Q_PROPERTY (QString inactivePagerColor READ inactivePagerColor WRITE setinactivePagerColor NOTIFY inactivePagerColorChanged)
    Q_PROPERTY (QString textFieldStrokeColor READ textFieldStrokeColor WRITE settextFieldStrokeColor NOTIFY textFieldStrokeColorChanged)
    Q_PROPERTY (QString placeholderColor READ placeholderColor WRITE setplaceholderColor NOTIFY placeholderColorChanged)
    Q_PROPERTY (QString iconOverlayColor READ iconOverlayColor WRITE seticonOverlayColor NOTIFY iconOverlayColorChanged)
    Q_PROPERTY (QString iconStrokeColor READ iconStrokeColor WRITE seticonStrokeColor NOTIFY iconStrokeColorChanged)
    Q_PROPERTY (QString progressBarColor READ progressBarColor WRITE setprogressBarColor NOTIFY progressBarColorChanged)
    Q_PROPERTY (QString defaultFontFamily READ defaultFontFamily WRITE setdefaultFontFamily NOTIFY defaultFontFamilyChanged)
    Q_PROPERTY (QString proxyHostName READ proxyHostName WRITE setProxyHostName NOTIFY proxyHostNameChanged)
    Q_PROPERTY (QString proxyUser READ proxyUser WRITE setProxyUser NOTIFY proxyUserChanged)
    Q_PROPERTY (QString proxyPassword READ proxyPassword WRITE setProxyPassword NOTIFY proxyPasswordChanged)
    Q_PROPERTY (int proxyPort READ proxyPort WRITE setProxyPort NOTIFY proxyPortChanged)
    Q_PROPERTY (int proxyType READ proxyType WRITE setProxyType NOTIFY proxyTypeChanged)

public:
    explicit GlobalSettings(QObject *parent = 0);

    Q_INVOKABLE void save();

    void setHttpUserAgent(QString);
    void setHttpDiskCacheEnabled(bool);
    void setAutoLoadImages(bool);
    void setCertCheckEnabled(bool);
    void setTrustedDomains(QString);
    void setKioskmodeEnabled(bool);
    void setDebugEnabled(bool);
    void setRemoteDebuggingPort(QString);
    void setJavaScriptDisabled(bool);
    void setTouchtrackingEnabled(bool);
    void setViewRotation(int);
    void setScreensaverActivationTime(int);
    void setMaxTabCount(int);
    void setContextMenuEnabled(bool);
    void setDefaultUrl(QString);
    void setUiColor(QString);
    void setuiSeparatorColor(QString);
    void settoolBarSeparatorColor(QString);
    void settoolBarFillColor(QString);
    void setbuttonPressedColor(QString);
    void setemptyBackgroundColor(QString);
    void setuiHighlightColor(QString);
    void setinactivePagerColor(QString);
    void settextFieldStrokeColor(QString);
    void setplaceholderColor(QString);
    void seticonOverlayColor(QString);
    void seticonStrokeColor(QString);
    void setprogressBarColor(QString);
    void setdefaultFontFamily(QString);
    void setProxyHostName(QString);
    void setProxyUser(QString);
    void setProxyPassword(QString);
    void setProxyPort(int);
    void setProxyType(int);

    QString httpUserAgent() const { return m_httpUserAgent; }
    bool httpDiskCacheEnabled() const { return m_httpDiskCacheEnabled; }
    bool autoLoadImages() const { return m_autoLoadImages; }
    bool certCheckEnabled() const { return m_certCheckEnabled; }
    QString trustedDomains() const { return m_trustedDomains; }
    bool kioskmodeEnabled() const { return m_kioskmodeEnabled; }
    bool debugEnabled() const { return m_debugEnabled; }
    QString remoteDebuggingPort() const { return m_remoteDebuggingPort; }
    bool javaScriptDisabled() const { return m_javaScriptDisabled; }
    bool touchtrackingEnabled() const { return m_touchtrackingEnabled; }
    int viewRotation() const { return m_viewRotation; }
    int screensaverActivationTime() const { return m_screensaverActivationTime; }
    int maxTabCount() const { return m_maxTabCount; }
    bool contextMenuEnabled() const { return m_contextMenuEnabled; }
    QString defaultUrl() const { return m_defaultUrl; }
    QString uiColor() const { return m_uiColor; }
    QString uiSeparatorColor() const { return m_uiSeparatorColor; }
    QString toolBarSeparatorColor() const { return m_toolBarSeparatorColor; }
    QString toolBarFillColor() const { return m_toolBarFillColor; }
    QString buttonPressedColor() const { return m_buttonPressedColor; }
    QString emptyBackgroundColor() const { return m_emptyBackgroundColor; }
    QString uiHighlightColor() const { return m_uiHighlightColor; }
    QString inactivePagerColor() const { return m_inactivePagerColor; }
    QString textFieldStrokeColor() const { return m_textFieldStrokeColor; }
    QString placeholderColor() const { return m_placeholderColor; }
    QString iconOverlayColor() const { return m_iconOverlayColor; }
    QString iconStrokeColor() const { return m_iconStrokeColor; }
    QString progressBarColor() const { return m_progressBarColor; }
    QString defaultFontFamily() const { return m_defaultFontFamily; }
    QString proxyHostName() const { return m_proxyHostName; }
    QString proxyUser() const { return m_proxyUser; }
    QString proxyPassword() const { return m_proxyPassword; }
    int proxyPort() const { return m_proxyPort; }
    int proxyType() const { return m_proxyType; }

signals:
    void httpUserAgentChanged(QString);
    void httpDiskCacheEnabledChanged(bool);
    void autoLoadImagesChanged(bool);
    void certCheckEnabledChanged(bool);
    void trustedDomainsChanged(QString);
    void kioskmodeEnabledChanged(bool);
    void debugEnabledChanged(bool);
    void remoteDebuggingPortChanged(QString);
    void javaScriptDisabledChanged(bool);
    void touchtrackingEnabledChanged(bool);
    void viewRotationChanged(int);
    void screensaverActivationTimeChanged(int);
    void maxTabCountChanged(int);
    void contextMenuEnabledChanged(bool);
    void defaultUrlChanged(QString);
    void uiColorChanged(QString);
    void uiSeparatorColorChanged(QString);
    void toolBarSeparatorColorChanged(QString);
    void toolBarFillColorChanged(QString);
    void buttonPressedColorChanged(QString);
    void emptyBackgroundColorChanged(QString);
    void uiHighlightColorChanged(QString);
    void inactivePagerColorChanged(QString);
    void textFieldStrokeColorChanged(QString);
    void placeholderColorChanged(QString);
    void iconOverlayColorChanged(QString);
    void iconStrokeColorChanged(QString);
    void progressBarColorChanged(QString);
    void defaultFontFamilyChanged(QString);
    void proxyHostNameChanged(QString);
    void proxyUserChanged(QString);
    void proxyPasswordChanged(QString);
    void proxyPortChanged(int);
    void proxyTypeChanged(int);

private slots:
    void settingsFileChanged();

private:
    void load();

    Settings m_settings;

    QString m_httpUserAgent;
    bool m_httpDiskCacheEnabled;
    bool m_autoLoadImages;
    bool m_certCheckEnabled;
    QString m_trustedDomains;
    bool m_kioskmodeEnabled;
    bool m_debugEnabled;
    QString m_remoteDebuggingPort;
    bool m_javaScriptDisabled;
    bool m_touchtrackingEnabled;
    int m_viewRotation;
    int m_screensaverActivationTime;
    int m_maxTabCount;
    bool m_contextMenuEnabled;
    QString m_defaultUrl;
    QString m_uiColor;
    QString m_uiSeparatorColor;
    QString m_toolBarSeparatorColor;
    QString m_toolBarFillColor;
    QString m_buttonPressedColor;
    QString m_emptyBackgroundColor;
    QString m_uiHighlightColor;
    QString m_inactivePagerColor;
    QString m_textFieldStrokeColor;
    QString m_placeholderColor;
    QString m_iconOverlayColor;
    QString m_iconStrokeColor;
    QString m_progressBarColor;
    QString m_defaultFontFamily;
    QString m_proxyHostName;
    QString m_proxyUser;
    QString m_proxyPassword;
    int m_proxyPort;
    int m_proxyType;

};

#endif // GLOBALSETTINGS_H
